import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
//import java.media.j3d.Transform3d;
import org.jblas.DoubleMatrix;

public class Main {

    private static double rotateX, rotateY, rotateZ, theta, scale, transX, transY, transZ;
    private static String objectFile, driverFile;
    public static double[]cross = new double[3];

    //public static ArrayList<ArrayList<String>> obj= new ArrayList<ArrayList<String>>;
    public static void main(String[] args) throws Exception {
        driverFile = args[0];
        File file = new File(driverFile);
        getVars(file);
    }

    public static void getVars(File file) throws Exception {
        Scanner scan = new Scanner(file);
        int count = 0;
        while (scan.hasNext()) {
            String con = scan.next();
            System.out.println(con);
            rotateX = scan.nextDouble();
            rotateY = scan.nextDouble();
            rotateZ = scan.nextDouble();
            theta = scan.nextDouble();
            scale = scan.nextDouble();
            transX = scan.nextDouble();
            transY = scan.nextDouble();
            transZ = scan.nextDouble();
            objectFile = scan.next();

            Scanner counter = new Scanner(new File(objectFile));
            while (counter.hasNext()) {
                if (counter.hasNext("v")) {
                    count++;
                }
                String con1 = counter.nextLine();
            }

            double []vector = {rotateX,rotateY,rotateZ};
            //buildObjPoint(objectFile);
            String rotate = rotate(vector);
            String rotScale = scaler(rotate, scale);            String rotScaleTrans = trans(rotScale);
            buildOutput(rotScaleTrans);

        }
    }


   public static String rotate(double[]vector) throws Exception{
       double temp = vector[0];
       int location = 0;
       double normWv = 0;
       double Wv [] = new double[3];
        for(int j = 0; j <3; j++){
            Wv[j] = vector[j];
            normWv += Wv[j];
        }
       //Normalize the Wv vector here. this is first step in sage math
        for (int norm = 0; norm < 3; norm ++){
           Wv[norm] = Wv[norm]/normWv;
           System.out.println(Wv[norm]);
       }
       for(int i = 0; i <3; i++){

            if(temp > vector[i]){
                temp = vector[i];
                location = i;
            }
        }
        vector[location] = 1;
        DoubleMatrix w = new DoubleMatrix(1,3, vector);
        double [] Uv = new double[3];
        double[] Vv = new double[3];

       cross_prod(vector,Wv);
       Uv = cross.clone();

        cross_prod(Wv, Uv);
        Vv =cross.clone();


       double normUv = 0;

        for(int k = 0; k < 3; k++){
            normUv += Uv[k];
        }
        for(int l = 0; l < 3; l++){
            Uv[l] = Uv[l]/normUv;
        }

      DoubleMatrix Uvv = new DoubleMatrix(1,3, Uv);
       //Uvv.print();
       DoubleMatrix Vvv = new DoubleMatrix(1,3,Vv);
       //Vvv.print();
       DoubleMatrix Wvv = new DoubleMatrix(1,3,Wv);
       //Wvv.print();
       DoubleMatrix RM = new DoubleMatrix(3,3);
       RM.put(0,0, Uvv.get(0,0));
       RM.put(0,1, Uvv.get(0,1));
       RM.put(0,2, Uvv.get(0,2));
       RM.put(1,0, Vvv.get(0,0));
       RM.put(1,1, Vvv.get(0,1));
       RM.put(1,2, Vvv.get(0,2));
       RM.put(2,0, Wvv.get(0,0));
       RM.put(2,1, Wvv.get(0,1));
       RM.put(2,2, Wvv.get(0,2));


       DoubleMatrix RMt =new DoubleMatrix(3,3);
       RMt = RM.transpose();
       DoubleMatrix RMz = new DoubleMatrix(3,3);
       RMz.put(0,0,Math.cos(Math.toRadians(theta)));
       RMz.put(0,1,(Math.sin(Math.toRadians(theta)))*-1);
       RMz.put(0,2,0);
       RMz.put(1,0,Math.sin(Math.toRadians(theta)));
       RMz.put(1,1,Math.cos(Math.toRadians(theta)));
       RMz.put(1,2, 0);
       RMz.put(2,0, 0);
       RMz.put(2,1, 0);
       RMz.put(2,2, 1);
      // RMz.print();

       DoubleMatrix test = new DoubleMatrix(3,3);
       //test = RM.mmul(RMt);
       //test.print();
       test = RMt.mmul(RMz);
       DoubleMatrix rotMat = new DoubleMatrix(3,3);
       rotMat = test.mmul(RM);
       //test1.print();



       DoubleMatrix shit = new DoubleMatrix(1,3);
       FileWriter fw = new FileWriter(new File("rotate.obj"));
       System.out.println(objectFile);
       Scanner scan = new Scanner(new File(objectFile));
       while(scan.hasNext()){
           if(scan.hasNext("v")){
               String con = scan.next();
               DoubleMatrix n = new DoubleMatrix(1,3,scan.nextDouble(),scan.nextDouble(),scan.nextDouble());
               n = n.transpose();
               shit = rotMat.mmul(n);
               fw.write("v " + shit.get(0) +" " + shit.get(1) +" " + shit.get(2));
               fw.flush();
           }
          // if(scan.hasNext("vn")){
           //    String eat = scan.nextLine();
           //}
           fw.write(scan.nextLine() + "\n");
           fw.flush();
       }
       return "rotate.obj";
   }
    public static String scaler(String objectFile, double sc)throws Exception{
        Scanner obj = new Scanner(new File(objectFile));
        FileWriter fw = new FileWriter("scale.obj");
        BufferedWriter bw = new BufferedWriter(fw);
        double [][] scaleMatrix = new double[3][3];

        while(obj.hasNext()) {
            String build ="";
            double[] pVector = new double[3];
            double[] result = new double[3];

            if(obj.hasNext("v")) {
                String con = obj.next();
                for(int j = 0; j < 3; j++){
                    double temp = Double.parseDouble(obj.next());
                    pVector[j] = temp;
                }
                for (int i = 0; i < 3; i++) {
                    scaleMatrix[i][i] = sc;
                }
                for (int q = 0; q < 3; q++) {
                    for (int w = 0; w < 3; w++) {
                        result[q] += scaleMatrix[q][w] * pVector[w];
                    }
                    build = build + Double.toString(result[q]) + " ";
                }
                build = "v " + build;
                bw.write(build);
                bw.flush();
            }
            bw.write(obj.nextLine() + "\n");
            bw.flush();
        }
        return "scale.obj";
    }


    public static String trans(String testFile) throws Exception {
        Scanner obj = new Scanner(new File(testFile));
        FileWriter fw = new FileWriter("trans.obj");
        BufferedWriter bw = new BufferedWriter(fw);
        String build = "";
        while (obj.hasNext()) {
            if (obj.hasNext("v")) {
                String consume = obj.next();
                double temp1 = (Double.parseDouble(obj.next()) + transX);
                double temp2 = (Double.parseDouble(obj.next()) + transY);
                double temp3 = (Double.parseDouble(obj.next()) + transZ);
                build = "v " + Double.toString(temp1) + " " + Double.toString(temp2) + " " + Double.toString(temp3);
                bw.write(build);
            }
            bw.write(obj.nextLine() + "\n");
            bw.flush();
        }
        bw.close();
        //buildOutput("test3.obj");
        return "trans.obj";
    }

    public static void buildOutput(String file)throws Exception{
        DecimalFormat df = new DecimalFormat("00");

        int count = 0;

        System.out.println(file);

        String dir = driverFile.substring(0,8);
        new File(dir).mkdir();
        String fname = objectFile;
        fname = fname.substring(0,fname.lastIndexOf('.'));
        fname = fname + "_mw"+ df.format(count) + ".obj";
        String filePath = "./" +dir+"/"+fname;
        System.out.println(filePath);
        File f = new File(filePath);
        //f.createNewFile();
        if(f.exists()) {
            while (f.exists()) {
                count++;
                fname = fname.substring(0, fname.lastIndexOf('_'));
                fname = fname + "_mw" + df.format(count) + ".obj";
                f = new File("./" + dir + "/" + fname);
                //f.createNewFile();

            }
        }

        FileWriter fw = new FileWriter(f);
        Scanner a = new Scanner(new File(file));
        while (a.hasNextLine()){
            fw.write(a.nextLine());
            fw.write("\n");
            fw.flush();
        }

        fw.flush();
        /*
        File fileRotate = new File("rotate.obj");
        File fileScale = new File("scale.obj");
        File fileTrans = new File("trans.obj");
        fileRotate.delete();
        fileScale.delete();
        fileTrans.delete();
        */

    }

    public static void cross_prod(double[] a, double [] b){
        cross[0] = a[1] * b[2] - a[2] * b[1];
        cross[1] = a[0] * b[2] - a[2] * b[0];
        cross[2] = a[0] * b[1]- a[1] * b[0];
    }
}
